[
  {
    "name": "happyPath",
    "workflow": "APITest",
    "assets": [
      {
        "info": "---Step1   set user A balance = 10000   ---",
        "settings": {
          "defaultDiamond": 10000
        }
      },
      {
        "info": "---Step2   USER_DIAMOND_ACTIVE_{{userIdA}} == 0   ---",
        "dbOperation": {
          "redis": {
            "set": {
              "values": {
                "key": "USER_DIAMOND_ACTIVE_{{userIdA}}",
                "value": 0
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {"result":"OK"}
        }
      },
      {
        "info": "---Step3   USER_ACTIVE_V_TICKET_{{userIdA}} == 0   ---",
        "dbOperation": {
          "redis": {
            "set": {
              "values": {
                "key": "USER_ACTIVE_V_TICKET_{{userIdB}}",
                "value": 0
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {"result":"OK"}
        }
      },
      {
        "info": "---Step4 set user balance as 10000 diamond in postgres---",
        "dbOperation": {
          "sql": {
            "update": {
              "table": "t_user_balance",
              "criteria": {
                "user_id": "[js[{{userIdA}}]]"
              },
              "values": {
                "diamond": "{{defaultDiamond}}"
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {
            "result": "1"
          }
        }
      },
      {
        "Injection": "PwdLoginA.json"
      },
      {
        "Injection": "PwdLoginB.json"
      },
      {
        "info": "---Step5   check user balance from API   ---",
        "request": {
          "method": "GET",
          "url": "{{protocol}}://{{host}}/v1/money/user/balance",
          "param": {
            "token": "{{tokenA}}"
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "success": true,
            "results": {
              "diamond": "{{defaultDiamond}}",
              "usableBalance": {
                "diamond": "{{defaultDiamond}}"
              }
            }
          }
        }
      },
      {
        "info": "---Step6   extract userB V ticket   ---",
        "request": {
          "method": "GET",
          "url": "{{protocol}}://{{host}}/v1/money/user/balance",
          "param": {
            "token": "{{tokenB}}"
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "results": {
              "usableBalance": {
                "userId": "{{userIdB}}",
                "totalEarning": "[\\d]+"
              }
            }
          }
        },
        "extractions": {
          "results": {
            "usableBalance": {
              "totalEarning": "hostTicket"
            }
          }
        }
      },
      {
        "info": "---Step7   extract gift info   ---",
        "request": {
          "method": "GET",
          "url": "{{protocol}}://{{host}}/v1/config/gift/list",
          "param": {
            "token": "{{tokenA}}"
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "success": true,
            "error_code": 0
          }
        },
        "extractions": {
          "results": {
            "list": [
              {
                "id": "giftId",
                "giftType": "giftType",
                "diamond": "giftCost"
              }
            ]
          }
        }
      },
      {
        "info": "---Step8   create living room   ---",
        "request": {
          "method": "POST",
          "url": "{{protocol}}://{{host}}/v1/liveshow/create",
          "param": {
            "token": "{{tokenB}}",
            "title": "在一起吧吧吧",
            "skillTag": "",
            "location": "上海市1",
            "OPENRECORDINGKEY": "YES",
            "geoLocaltion": "31.236271,121.498745,上海市",
            "topics": "57ad4512765f47c8210cd701,亲子"
          },
          "multiPartEntity": {
            "binaryBodies": [
              {
                "name": "cover",
                "realFileName": "jelly.jpg",
                "mimeType": "multipart/form-data",
                "fileName": "jelly.jpg"
              }
            ]
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "success": true,
            "message": "",
            "error_code": 0,
            "results": {
              "roomId": "[\\w]{24}"
            }
          }
        },
        "extractions": {
          "results": {
            "roomId": "roomId"
          }
        }
      },
      {
        "info": "---Step9   send gift   ---",
        "request": {
          "method": "POST",
          "url": "{{protocol}}://{{host}}/v1/gift/sendgift",
          "param": {
            "giftId": "{{giftId}}",
            "giftType": "{{giftType}}",
            "num": 1,
            "remark": "",
            "roomId": "{{roomId}}",
            "timestamp": "[js[new Date().getTime().toString();]]",
            "token": "{{tokenA}}"
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "success": true,
            "message": "操作成功.",
            "error_code": "0[js[print('delay for create room');for(var t = Date.now();Date.now() - t <= 20000;);'']]",
            "results": {}
          }
        }
      },
      {
        "info": "---Step10   check user balance from API  ---",
        "request": {
          "method": "GET",
          "url": "{{protocol}}://{{host}}/v1/money/user/balance",
          "param": {
            "token": "{{tokenA}}"
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "success": true,
            "message": "[js[print('delay for send gift');for(var t = Date.now();Date.now() - t <= 5000;);'']]",
            "error_code": 0,
            "results": {
              "diamond": "[js[ {{defaultDiamond}}-{{giftCost}} ]]",
              "usableBalance": {
                "userId": "{{userIdA}}",
                "diamond": "{{defaultDiamond}}"
              }
            }
          }
        }
      },
      {
        "info": "---Step11   check user balance from redis   ---",
        "dbOperation": {
          "redis": {
            "get": {
              "criteria": {
                "key": "USER_DIAMOND_ACTIVE_{{userIdA}}"
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {
            "result": "[js[ \"{{giftCost}}\" ]]"
          }
        }
      },
      {
        "info": "---Step12   check user ticket from redis   ---",
        "dbOperation": {
          "redis": {
            "get": {
              "criteria": {
                "key": "USER_ACTIVE_V_TICKET_{{userIdB}}"
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {
            "result": "[js[ var res = {{giftCost}} * 7; res.toString() ]]"
          }
        }
      },
      {
        "info": "---Step13   check user ticket from postgres   ---",
        "dbOperation": {
          "sql": {
            "select": {
              "table": "t_user_balance",
              "criteria": {
                "user_id": "[js[{{userIdB}}]]"
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {
            "total_earning": "{{hostTicket}}"
          }
        }
      },
      {
        "info": "---Step14   destory living room   ---",
        "request": {
          "method": "POST",
          "url": "{{protocol}}://{{host}}/v1/liveshow/{{roomId}}/destroy",
          "param": {
            "token": "{{tokenB}}"
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "success": true,
            "error_code": 0
          }
        }
      },
      {
        "info": "---Step15   check user balance from API  ---",
        "request": {
          "method": "GET",
          "url": "{{protocol}}://{{host}}/v1/money/user/balance",
          "param": {
            "token": "{{tokenA}}"
          }
        },
        "assertions": {
          "StatusCode": 200,
          "ResponseJson": {
            "success": true,
            "message": "[js[print('delay for destroy room');for(var t = Date.now();Date.now() - t <= 20000;);'']]",
            "error_code": 0,
            "results": {
              "diamond": "[js[ {{defaultDiamond}}-{{giftCost}} ]]",
              "usableBalance": {
                "userId": "{{userIdA}}",
                "diamond": "[js[{{defaultDiamond}}-{{giftCost}}]]"
              }
            }
          }
        }
      },
      {
        "info": "---Step16   USER_DIAMOND_ACTIVE_{{userIdA}} == 0   ---",
        "dbOperation": {
          "redis": {
            "get": {
              "criteria": {
                "key": "USER_DIAMOND_ACTIVE_{{userIdA}}"
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {
            "result": "0"
          }
        }
      },
      {
        "info": "---Step17   USER_ACTIVE_V_TICKET_{{userIdB}} == 0   ---",
        "dbOperation": {
          "redis": {
            "get": {
              "criteria": {
                "key": "USER_ACTIVE_V_TICKET_{{userIdB}}"
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {
            "result": "0"
          }
        }
      },
      {
        "info": "---Step18   check user ticket from postgres   ---",
        "dbOperation": {
          "sql": {
            "select": {
              "table": "t_user_balance",
              "criteria": {
                "user_id": "[js[{{userIdB}}]]"
              }
            }
          }
        },
        "assertions": {
          "ResponseJson": {
            "total_earning": "[js[{{hostTicket}} + {{giftCost}}*7]]"
          }
        }
      }
    ]
  }
]